name: PR Comment Build Trigger

on:
  issue_comment:
    types: [created]

jobs:
  trigger-build:
    # Only run on PR comments (not issues)
    if: github.event.issue.pull_request != null
    runs-on: ubuntu-latest
    permissions:
      issues: write        # Create comments
      pull-requests: write # Add reactions to comments
      actions: write       # Trigger workflow_dispatch

    steps:
      - name: Check for /build command
        id: check-command
        run: |
          COMMENT="${{ github.event.comment.body }}"
          # Match /build exactly (with optional whitespace or end of string)
          if [[ "$COMMENT" =~ ^/build([[:space:]]|$) ]]; then
            echo "command_found=true" >> $GITHUB_OUTPUT
          else
            echo "command_found=false" >> $GITHUB_OUTPUT
          fi

      - name: Check permissions
        id: check-permissions
        if: steps.check-command.outputs.command_found == 'true'
        run: |
          ASSOCIATION="${{ github.event.comment.author_association }}"
          if [ "$ASSOCIATION" = "OWNER" ] || [ "$ASSOCIATION" = "MEMBER" ] || [ "$ASSOCIATION" = "COLLABORATOR" ]; then
            echo "has_permission=true" >> $GITHUB_OUTPUT
          else
            echo "has_permission=false" >> $GITHUB_OUTPUT
          fi

      - name: Notify unauthorized user
        if: steps.check-command.outputs.command_found == 'true' && steps.check-permissions.outputs.has_permission == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: '-1'
            });

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '❌ You do not have permission to trigger builds. Only repository owners, members, and collaborators can use the `/build` command.'
            });

      - name: Trigger build workflow
        if: steps.check-command.outputs.command_found == 'true' && steps.check-permissions.outputs.has_permission == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Add reaction to acknowledge command
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'eyes'
            });

            try {
              // Get PR details
              const pr = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number
              });

              // Check if PR is open
              if (pr.data.state !== 'open') {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: `❌ Cannot trigger build: PR is ${pr.data.state}`
                });

                await github.rest.reactions.createForIssueComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: context.payload.comment.id,
                  content: '-1'
                });

                return;
              }

              // Check if building from a fork
              const baseRepo = `${context.repo.owner}/${context.repo.repo}`;
              const headRepo = pr.data.head.repo.full_name;
              const isFork = headRepo !== baseRepo;

              // Warn maintainer if building from fork (but allow it)
              if (isFork) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: `⚠️ **Security Notice**: Building from fork repository\n\n- Fork: \`${headRepo}\`\n- Base: \`${baseRepo}\`\n\nEnsure you've reviewed the code changes before proceeding. The build will run with repository permissions.`
                });
              }

              // Trigger build workflow
              // For fork PRs: Use base branch workflow (PR's workflow doesn't exist in base repo)
              // For same-repo PRs: Use PR's branch (allows testing workflow changes)
              const workflowRef = isFork ? pr.data.base.ref : pr.data.head.ref;

              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'build.yml',
                ref: workflowRef,
                inputs: {
                  repository: headRepo,       // Fork or base repo
                  ref: pr.data.head.sha       // SHA to build
                }
              });

              // Success reaction
              await github.rest.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: context.payload.comment.id,
                content: 'rocket'
              });

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `✅ Build triggered for PR #${context.issue.number}\n\n- Repository: \`${headRepo}\`\n- Branch: \`${pr.data.head.ref}\`\n- Commit: \`${pr.data.head.sha.substring(0, 7)}\`\n- Workflow: \`${workflowRef}\` ${isFork ? '(base branch - fork PR)' : '(PR branch - testing workflow changes)'}\n\nCheck the [Actions tab](/${context.repo.owner}/${context.repo.repo}/actions) for progress.`
              });

              console.log(`Build triggered for PR #${context.issue.number}`);
              console.log(`Repository: ${headRepo}`);
              console.log(`Ref: ${pr.data.head.sha}`);
            } catch (error) {
              // Error handling with user feedback
              await github.rest.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: context.payload.comment.id,
                content: 'confused'
              });

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `❌ Failed to trigger build: ${error.message}\n\nCheck the [workflow logs](/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.`
              });

              throw error;
            }
