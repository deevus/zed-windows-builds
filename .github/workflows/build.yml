name: Build

on:
  workflow_call:
    inputs:
      repository:
        description: Repository to clone and build
        type: string
        default: zed-industries/zed
      ref:
        description: Branch/tag/ref to build
        type: string
        required: true
  workflow_dispatch:
    inputs:
      repository:
        description: Repository to clone and build
        type: string
        default: zed-industries/zed
      ref:
        description: Branch/tag/ref to build
        type: string
        default: main

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        backend: [vulkan, opengl]
        include:
          - backend: vulkan
            artifact_name: zed-release
            rustflags: ""
          - backend: opengl
            artifact_name: zed-release-opengl
            rustflags: "--cfg gles"

    steps:
      - name: Enable long paths in Git
        run: |
          git config --system core.longpaths true

      - name: Enable long paths in Windows
        shell: powershell
        run: |
          New-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" `
            -Name "LongPathsEnabled" -Value 1 -PropertyType DWORD -Force

      - name: Install PSToml module
        shell: pwsh
        run: Install-Module -Name PSToml -Scope CurrentUser -Force

      - name: Checkout self
        uses: actions/checkout@v4

      - name: Checkout Zed
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}
          path: zed

      - name: Install rust nightly
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
          override: true
          target: wasm32-wasip1

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.backend }}
          workspaces: "zed -> target"

      - name: Setup rustflags
        shell: pwsh
        run: ./Parse-Rustflags.ps1 ${{ matrix.rustflags }}

      # ===== New step for modifying files =====
      - name: Modify feature_flags.rs
        shell: pwsh
        working-directory: zed
        run: |
          $filePath = "crates/feature_flags/src/feature_flags.rs"
          $originalContent = Get-Content -Path $filePath -Raw
          
          # Define the content to be replaced (preserve original indentation format)
          $pattern = 'fn enabled_for_all\(\) -> bool \{\s+false\s+\}'
          $replacement = 'fn enabled_for_all() -> bool {'
          $replacement += "`n        true"
          $replacement += "`n    }"
          
          # Perform the replacement
          $modifiedContent = $originalContent -replace $pattern, $replacement
          
          # Verify if the modification was successful
          if ($modifiedContent -eq $originalContent) {
              Write-Error "Failed to modify $filePath - pattern not found!"
              exit 1
          }
          
          # Save the modified file
          Set-Content -Path $filePath -Value $modifiedContent -NoNewline
          Write-Host "Successfully modified $filePath"

      - name: Build release
        working-directory: zed
        run: cargo build --release

      - name: Archive build
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: zed/target/release/zed.exe
